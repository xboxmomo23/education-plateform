import app from './app';
import { testConnection } from './config/database';
import dotenv from 'dotenv';

dotenv.config();

const PORT = process.env.PORT || 4000;

// =========================
// D√©marrage du Serveur
// =========================

async function startServer() {
  try {
    // 1. Tester la connexion √† la base de donn√©es
    console.log('üîå Connexion √† PostgreSQL...');
    const dbConnected = await testConnection();

    if (!dbConnected) {
      console.error('‚ùå Impossible de se connecter √† la base de donn√©es');
      process.exit(1);
    }

    // 2. D√©marrer le serveur Express
    const server = app.listen(PORT, () => {
      console.log('');
      console.log('‚úÖ ========================================');
      console.log(`‚úÖ  EduPilot Backend Server Running`);
      console.log('‚úÖ ========================================');
      console.log(`üìç  URL: http://localhost:${PORT}`);
      console.log(`üåç  Environment: ${process.env.NODE_ENV || 'development'}`);
      console.log(`üóÑÔ∏è   Database: ${process.env.PGDATABASE}`);
      console.log('‚úÖ ========================================');
      console.log('');
    });

    // Gestion de l'arr√™t gracieux
    process.on('SIGTERM', () => {
      console.log('üëã SIGTERM re√ßu, fermeture du serveur...');
      server.close(() => {
        console.log('‚úÖ Serveur ferm√© proprement');
        process.exit(0);
      });
    });

    process.on('SIGINT', () => {
      console.log('\nüëã SIGINT re√ßu, fermeture du serveur...');
      server.close(() => {
        console.log('‚úÖ Serveur ferm√© proprement');
        process.exit(0);
      });
    });
  } catch (error) {
    console.error('‚ùå Erreur fatale au d√©marrage:', error);
    process.exit(1);
  }
}

// Lancer le serveur
startServer();